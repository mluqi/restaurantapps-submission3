{"version":3,"file":"app~e4317507.bundle.js","mappings":";+JAUA,QANe,CACb,IAAKA,EAAAA,EACL,cAAeC,EAAAA,EACf,YAAaC,EAAAA,mCCuBf,QA9BkB,CAChBC,2BADgB,WAEd,IAAMC,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cACpCC,EAAaC,KAAKC,YAAYR,GACpC,OAAOO,KAAKE,YAAYH,EACzB,EAEDI,8BAPgB,WAQd,IAAMV,EAAMC,OAAOC,SAASC,KAAKC,MAAM,GAAGC,cAC1C,OAAOE,KAAKC,YAAYR,EACzB,EAEDQ,YAZgB,SAYJR,GACV,IAAMW,EAAaX,EAAIY,MAAM,KAC7B,MAAO,CACLC,SAAUF,EAAW,IAAM,KAC3BG,GAAIH,EAAW,IAAM,KACrBI,KAAMJ,EAAW,IAAM,KAE1B,EAEDF,YArBgB,SAqBJH,GACV,OACGA,EAAWO,SAAX,WAA0BP,EAAWO,UAAa,MAC9CP,EAAWQ,GAAK,OAAS,KACzBR,EAAWS,KAAX,WAAsBT,EAAWS,MAAS,GAElD,mCCJH,QAvBwB,CACtBC,KADsB,YAC0B,WAAzCC,EAAyC,EAAzCA,uBAAwBC,EAAiB,EAAjBA,cAC7BD,EAAuBE,iBAAiB,SAAS,SAACC,GAChD,EAAKC,aAAaD,EAAOF,EAC1B,IAGDC,iBAAiB,SAAS,SAACC,GACzB,EAAKE,YAAYF,EAAOF,EACzB,GACF,EAEDG,aAZsB,SAYTD,EAAOF,GAClBE,EAAMG,kBACNL,EAAcM,UAAUC,OAAO,OAChC,EAEDH,YAjBsB,SAiBVF,EAAOF,GACjBE,EAAMG,kBACNL,EAAcM,UAAUE,OAAO,OAChC,mSCnBH,smNA8CA,QA7C4B,CACpBV,KADoB,YAC2C,6HAAxDW,EAAwD,EAAxDA,oBAAqBC,EAAmC,EAAnCA,oBAAqBC,EAAc,EAAdA,WACrD,EAAKF,oBAAsBA,EAC3B,EAAKE,WAAaA,EAClB,EAAKD,oBAAsBA,EAHwC,SAK7D,EAAKE,eALwD,4CAMpE,EAEKA,aAToB,WASL,yHACXhB,EAAO,EAAKe,WAAZf,GADW,SAGT,EAAKiB,kBAAkBjB,GAHd,kCAIjB,EAAKkB,cAJY,sBAMjB,EAAKC,aANY,4CAQpB,EAEKF,kBAnBoB,SAmBFjB,GAAI,kIACD,EAAKc,oBAAoBM,cAAcpB,GADtC,cACpBe,EADoB,2BAEjBA,GAFiB,4CAG3B,EAEDI,WAxB0B,WAwBb,WACX1B,KAAKoB,oBAAoBQ,WAAYC,EAAAA,EAAAA,KAElBC,SAASC,cAAc,eAC/BnB,iBAAiB,QAA5B,YAAqC,8FAC7B,EAAKS,oBAAoBW,cAAc,EAAKV,YADf,OAEnC,EAAKC,eAF8B,2CAItC,EAEDE,YAlC0B,WAkCZ,WACZzB,KAAKoB,oBAAoBQ,WAAYK,EAAAA,EAAAA,KAElBH,SAASC,cAAc,eAC/BnB,iBAAiB,QAA5B,YAAqC,8FAC7B,EAAKS,oBAAoBa,iBAAiB,EAAKZ,WAAWf,IAD7B,OAEnC,EAAKgB,eAF8B,2CAItC,mSC3CH,m6MAiBA,QAhBgB,gCAAG,uFACX,kBAAmBY,UADR,uBAEfC,QAAQC,IAAI,+CAFG,iCAMXC,EAAK,IAAIC,EAAAA,GAAsB,kBANpB,kBASTD,EAAGE,WATM,OAUfJ,QAAQC,IAAI,6BAVG,kDAYfD,QAAQC,IAAI,oCAAZ,MAZe,wOAAH","sources":["webpack://restaurant-apps/./src/scripts/routes/routes.js","webpack://restaurant-apps/./src/scripts/routes/url-parser.js","webpack://restaurant-apps/./src/scripts/utils/drawer-initiator.js","webpack://restaurant-apps/./src/scripts/utils/like-button-presenter.js","webpack://restaurant-apps/./src/scripts/utils/sw-register.js"],"sourcesContent":["import Home from '../views/pages/home';\nimport Favorite from '../views/pages/favorite';\nimport Detail from '../views/pages/detail';\n\nconst routes = {\n  '/': Home,\n  '/detail/:id': Detail,\n  '/favorite': Favorite,\n};\n\nexport default routes;\n","const UrlParser = {\n  parseActiveUrlWithCombiner() {\n    const url = window.location.hash.slice(1).toLowerCase();\n    const splitedUrl = this.urlSplitter(url);\n    return this.urlCombiner(splitedUrl);\n  },\n\n  parseActiveUrlWithoutCombiner() {\n    const url = window.location.hash.slice(1).toLowerCase();\n    return this.urlSplitter(url);\n  },\n\n  urlSplitter(url) {\n    const urlsSplits = url.split('/');\n    return {\n      resource: urlsSplits[1] || null,\n      id: urlsSplits[2] || null,\n      verb: urlsSplits[3] || null,\n    };\n  },\n\n  urlCombiner(splitedUrl) {\n    return (\n      (splitedUrl.resource ? `/${splitedUrl.resource}` : '/')\n        + (splitedUrl.id ? '/:id' : '')\n        + (splitedUrl.verb ? `/${splitedUrl.verb}` : '')\n    );\n  },\n};\n\nexport default UrlParser;\n","const DrawerInitiator = {\n  init({ hamburgerButtonElement, drawerElement }) {\n    hamburgerButtonElement.addEventListener('click', (event) => {\n      this.toggleDrawer(event, drawerElement);\n    });\n\n    // eslint-disable-next-line no-restricted-globals\n    addEventListener('click', (event) => {\n      this.closeDrawer(event, drawerElement);\n    });\n  },\n\n  toggleDrawer(event, drawerElement) {\n    event.stopPropagation();\n    drawerElement.classList.toggle('open');\n  },\n\n  closeDrawer(event, drawerElement) {\n    event.stopPropagation();\n    drawerElement.classList.remove('open');\n  },\n};\n\nexport default DrawerInitiator;\n","import { createLikeRestaurantButtonTemplate, createLikedRestaurantButtonTemplate } from '../views/templates/like-liked-template';\n\nconst LikeButtonPresenter = {\n  async init({ likeButtonContainer, favoriteRestaurants, restaurant }) {\n    this.likeButtonContainer = likeButtonContainer;\n    this.restaurant = restaurant;\n    this.favoriteRestaurants = favoriteRestaurants;\n\n    await this.renderButton();\n  },\n\n  async renderButton() {\n    const { id } = this.restaurant;\n\n    if (await this.isRestaurantExist(id)) {\n      this.renderLiked();\n    } else {\n      this.renderLike();\n    }\n  },\n\n  async isRestaurantExist(id) {\n    const restaurant = await this.favoriteRestaurants.getRestaurant(id);\n    return !!restaurant;\n  },\n\n  renderLike() {\n    this.likeButtonContainer.innerHTML = createLikeRestaurantButtonTemplate();\n\n    const likeButton = document.querySelector('#likeButton');\n    likeButton.addEventListener('click', async () => {\n      await this.favoriteRestaurants.putRestaurant(this.restaurant);\n      this.renderButton();\n    });\n  },\n\n  renderLiked() {\n    this.likeButtonContainer.innerHTML = createLikedRestaurantButtonTemplate();\n\n    const likeButton = document.querySelector('#likeButton');\n    likeButton.addEventListener('click', async () => {\n      await this.favoriteRestaurants.deleteRestaurant(this.restaurant.id);\n      this.renderButton();\n    });\n  },\n};\n\nexport default LikeButtonPresenter;\n","import * as WorkboxWindow from 'workbox-window';\n\nconst swRegister = async () => {\n  if (!('serviceWorker' in navigator)) {\n    console.log('Service Worker not supported in the browser');\n    return;\n  }\n\n  const wb = new WorkboxWindow.Workbox('./sw.bundle.js');\n\n  try {\n    await wb.register();\n    console.log('Service worker registered');\n  } catch (error) {\n    console.log('Failed to register service worker', error);\n  }\n};\n\nexport default swRegister;\n"],"names":["Home","Detail","Favorite","parseActiveUrlWithCombiner","url","window","location","hash","slice","toLowerCase","splitedUrl","this","urlSplitter","urlCombiner","parseActiveUrlWithoutCombiner","urlsSplits","split","resource","id","verb","init","hamburgerButtonElement","drawerElement","addEventListener","event","toggleDrawer","closeDrawer","stopPropagation","classList","toggle","remove","likeButtonContainer","favoriteRestaurants","restaurant","renderButton","isRestaurantExist","renderLiked","renderLike","getRestaurant","innerHTML","createLikeRestaurantButtonTemplate","document","querySelector","putRestaurant","createLikedRestaurantButtonTemplate","deleteRestaurant","navigator","console","log","wb","WorkboxWindow","register"],"sourceRoot":""}